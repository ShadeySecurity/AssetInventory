# -*- coding: utf-8 -*-
# this file is released under public domain and you can use without limitations

# -------------------------------------------------------------------------
# This is a sample controller
# - index is the default action of any application
# - user is required for authentication and authorization
# - download is for downloading files uploaded in the db (does streaming)
# -------------------------------------------------------------------------
from nmapscanner import *


def index():
    """
    example action using the internationalization operator T and flash
    rendered by views/default/index.html or views/generic.html

    if you need a simple wiki simply replace the two lines below with:
    return auth.wiki()
    """
    response.flash = T("Please sign up to utilize this application.")
    return dict(message=T('Welcome to our Asset Inventory Server!'))


def user():
    """
    exposes:
    http://..../[app]/default/user/login
    http://..../[app]/default/user/logout
    http://..../[app]/default/user/register
    http://..../[app]/default/user/profile
    http://..../[app]/default/user/retrieve_password
    http://..../[app]/default/user/change_password
    http://..../[app]/default/user/bulk_register
    use @auth.requires_login()
        @auth.requires_membership('group name')
        @auth.requires_permission('read','table name',record_id)
    to decorate functions that need access control
    also notice there is http://..../[app]/appadmin/manage/auth to allow administrator to manage users
    """
    return dict(form=auth())


@cache.action()
def download():
    """
    allows downloading of uploaded files
    http://..../[app]/default/download/[filename]
    """
    return response.download(request, db)


def call():
    """
    exposes services. for example:
    http://..../[app]/default/call/jsonrpc
    decorate with @services.jsonrpc the functions to expose
    supports xml, json, xmlrpc, jsonrpc, amfrpc, rss, csv
    """
    return service()

@auth.requires_login()
@auth.requires_membership('auditor')
def audit():
    grid = SQLFORM.smartgrid(db.auditexecute, headers={'auditexecute.execoptions':'Standard Options Selected','auditexecute.advancedCMDS':'Advanced Options Selected','auditexecute.Identifier':'Task Identifier'}, deletable=False, create=False, csv=True, editable=False)
    return locals()
    return dict(form=form)
@auth.requires_login()
def results():
    grid = SQLFORM.grid(db.results, editable=False, deletable=False, headers={'results.ip':'IP','results.netbios':'NetBIOS Hostname','results.first_timestamp':'First Seen','results.last_timestamp':'Last Seen','results.dns':'DNS Hostname','results.os':'Operating System'})
    return locals()
    return dict(form=form)

@auth.requires_login()
@auth.requires_membership('editor')
def editresults():
    grid = SQLFORM.smartgrid(db.results, headers={'results.ip':'IP','results.netbios':'NetBIOS Hostname','results.first_timestamp':'First Seen','results.last_timestamp':'Last Seen','results.dns':'DNS Hostname','results.os':'Operating System'})
    return locals()
    return dict(form=form)

@auth.requires_login()
@auth.requires_membership('execute')
def execute():
    from  datetime import datetime
    import re
    try:
        # This is the form we display to the user
        form = SQLFORM(db.auditexecute, record=None,
            deletable=False, linkto=None,
            upload=None, fields = None, labels = {'network':'Your network address or IP','execoptions':'Options','advancedCMDS':"Advanced Commands",'Identifier':'Task Identifier'},
            col3={}, submit_button='Submit',
            delete_label='Check to delete:',
            showid=True, readonly=False,
            comments=True, keepopts=[],
            ignore_rw=False, record_id=None,
            formstyle='table3cols',
            buttons=['submit'], separator=': ')
        if form.process().accepted:
            if len(form.vars.network) > 0 and len(form.vars.speed) > 0 and len(form.vars.justification) > 0:
                speedopts = ["1","2","3","4","5"]
                if form.vars.speed in speedopts:
                    response.flash = T('Thanks! The form has been submitted.')
                    options = ""
                    speed = " -T %s" % (form.vars.speed)
                    if "Get Hostname" in form.vars.execoptions:
                        options += "--script nbstat.nse"
                    elif "Get OS" in form.vars.execoptions:
                        options += " -O"
                    elif "Get ALL" in form.vars.execoptions:
                        options += " -A"
                    else:
                        response.flash = "You selected no standard options! Welcome to 1337 land. You selected %s" % form.vars.execoptions
                    if len(options) < 3:
                        response.flash = "Missing your options!"
                        return 
                    options += " "
                    options += str(form.vars.advancedCMDS)
                    network =  str(form.vars.network)
                    fileopts = str(form.vars.results_location)
                    scan = SuperScan()
                    # If we need root, use custom scan
                    if "-O" in options or "-sS" in options or "-i" in options or "-A" in options:
                        # Run a more advanced offload scan, get list of dictionaries back
                        scanresults = scan.customscan(network,speed,options)
                    else:
                        options += speed
                        scan.scan(network,options)
                        # Execute Standard Scan, get a list of dictionaries
                        scanresults = scan.out_struct()
                    try:
                        if not type(scanresults) is list or not type(scanresults[0]) is dict:
                            echo
                            "Execute: Critical: Returned object from customscan() was not a list of dictionaries"
                            return
                    except Exception as err:
                        echo
                        "Excute: Error: %s" % err
                    currentobj = {}
                    writelist = []
                    for entry in scanresults:
                        # TODO Validate input type and the contents of that type, below is a sample!
                        if type(scanresults['mac']) is str:
                            regex = r'^[0-9a-fA-F]{2}[\:\-]{1}[0-9a-fA-F]{2}[\:\-]{1}[0-9a-fA-F]{2}[\:\-]{1}'
                                        r'[0-9a-fA-F]{2}[\:\-]{1}[0-9a-fA-F]{2}[\:\-]{1}[0-9a-fA-F]{2}[\:\-]{1}'
                                        r'[0-9a-fA-F]{2}[\:\-]{1}[0-9a-fA-F]{2}[\:\-]'
                            if re.match(regex,scanresults['mac']:
                                currentobj['mac'] = scanresults['mac'].replace("-",":")
                            else:
                                echo "Execute: Error: Mac Address didnt meet expected pattern!"
                        else:
                            echo "Execute: Error: Mac Address was not a string!"
                        currentobj['ip'] = scanresults['ip']
                        currentobj['hostnames'] = scanresults['hostnames']
                        currentobj['software'] = scanresults['software']
                        currentobj['type'] = scanresults['type']
                        currentobj['vendor'] = scanresults['vendor']
                        currentobj['netbios'] = scanresults['netbios']
                        currentobj['os'] = scanresults['os']
                        currentobj['vulnerabilities'] = scanresults['vulnerabilities']
                        currentobj['date_timestamp'] = scanresults['date_timestamp']
                        currentobj['ports'] = scanresults['ports']
                        writelist.append(currentobj)
                        # Write to hostdb
                        success = db(db.hostdb.ip == hosts.address).update(mac=currentobj['mac'],
                                                                           ip=currentobj['ip'],
                                                                           vendor=currentobj['vendor'],
                                                                           ports=currentobj['ports'],
                                                                           os=currentobj['os'],
                                                                           hostnames=currentobj['hostnames'],
                                                                           last_timestamp=str(datetime.now()))
                        # If not an update, then an original insert!
                        if not success:
                            success = db.hostdb.insert(mac=currentobj['mac'],
                                                       ip=currentobj['ip'],
                                                       vendor=currentobj['vendor'],
                                                       ports=currentobj['ports'],
                                                       os=currentobj['os'],
                                                       hostnames=currentobj['hostnames'],
                                                       first_timestamp=str(datetime.now()))
                    try:
                        # Write to the results database the full output we find useful
                        success = importtodb("results", writelist)
                        if not success:
                            echo "Execute: Error: Unable to write to database around line 172."
                    except Exception as err:
                        response.flash = " Critical error updating the database: %s" % err
                else:
                    response.flash = T('Thanks, but you gave us a bad speed! 1-5 please!')
            else:
                response.flash = T('Try again - no fields can be empty.')
            response.flash = "Thanks for scanning! Your results are now in the results database!"
        else:
            helloworld = 1
        return dict(form=form)
    except Exception as err:
        response.flash = "Critical Error: %s" % err
    return dict(form=form)

##################################
# Name:         importtodb
# Description:  Helper function which allows you to insert  a dictionary to the database with ease!
# Input:        database [string] - What database to write to
#               importobj [list/dict] - A dictionary or list of dictionaries which contain key as column name and value
#                                           as the value to write to that column.
# Output:       status - A simple True / False if the database was written to.
##################################

def importtodb(database, importobj):
    if type(importobj) is list:
        success = db.(database).bulk_insert(importobj)
    elif type(importobj) is dict:
        success = db.(database).insert(importobj)
    else:
        success = False
    return success