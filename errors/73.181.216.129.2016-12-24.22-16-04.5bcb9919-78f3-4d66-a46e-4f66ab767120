(dp1
S'output'
p2
S"<type 'exceptions.SyntaxError'> define_table argument is not a Field or Table: "
p3
sS'layer'
p4
S'/home/www-data/web2py/applications/pyAssetInventory/controllers/default.py'
p5
sS'code'
p6
S'# -*- coding: utf-8 -*-\n# this file is released under public domain and you can use without limitations\n\n# -------------------------------------------------------------------------\n# This is a sample controller\n# - index is the default action of any application\n# - user is required for authentication and authorization\n# - download is for downloading files uploaded in the db (does streaming)\n# -------------------------------------------------------------------------\nfrom nmapscanner import *\nfrom pycsvasset import *\nfrom pynessusasset import *\nfrom pynmapasset import *\n\n\ndef index():\n    """\n    example action using the internationalization operator T and flash\n    rendered by views/default/index.html or views/generic.html\n\n    if you need a simple wiki simply replace the two lines below with:\n    return auth.wiki()\n    """\n    return manage()\n\n\ndef manage():\n    grid = SQLFORM.smartgrid(db.hosts,linked_tables=[\'ports\'])\n    return locals()\n\n\ndef user():\n    """\n    exposes:\n    http://..../[app]/default/user/login\n    http://..../[app]/default/user/logout\n    http://..../[app]/default/user/register\n    http://..../[app]/default/user/profile\n    http://..../[app]/default/user/retrieve_password\n    http://..../[app]/default/user/change_password\n    http://..../[app]/default/user/bulk_register\n    use @auth.requires_login()\n        @auth.requires_membership(\'group name\')\n        @auth.requires_permission(\'read\',\'table name\',record_id)\n    to decorate functions that need access control\n    also notice there is http://..../[app]/appadmin/manage/auth to allow administrator to manage users\n    """\n    return dict(form=auth())\n\n\n@cache.action()\ndef download():\n    """\n    allows downloading of uploaded files\n    http://..../[app]/default/download/[filename]\n    """\n    return response.download(request, db)\n\n\ndef call():\n    """\n    exposes services. for example:\n    http://..../[app]/default/call/jsonrpc\n    decorate with @services.jsonrpc the functions to expose\n    supports xml, json, xmlrpc, jsonrpc, amfrpc, rss, csv\n    """\n    return service()\n\n@auth.requires_login()\n@auth.requires_membership(\'execute\')\ndef scan_nmap():\n    #TODO: Create new execute page for nmap scans\n    pass\n\n@auth.requires_login()\n@auth.requires_membership(\'import\')\ndef import_results():\n    #TODO: Create a results page for importing csv, nessus, openvas, and nmap\n    form = SQLFORM.factory("",\n                           Field(" ", default=" ", writable=False),\n                           Field("User_Name", \'string\', required=True, default=auth.user.username, requires=IS_NOT_EMPTY(),writable=False),\n                           Field(\'User_IP\',\'string\', required=True, writable=False, default=request.client,requires=IS_IPV4()),\n                           Field(\'Scan_Type\', required=True, requires=IS_IN_SET([\'NMAP\',\'CSV\',\'NESSUS\',\'OPENVAS\'], zero=T("Select Scan Type"), error_message=T(\'Not a valid option. Please see documentation.\'))),\n                           Field(\'Task_ID\', \'string\'),\n                           Field(\'Approver\', \'string\'),\n                           Field(\'Description\',\'text\'),\n                           Field(\'Scanner_IP\',\'string\',requires=IS_IPV4()),\n                           Field(\'Justification\',\'text\',required=True, requires=IS_NOT_EMPTY()),\n                           Field(\'Results_File\',\'upload\',uploadfolder="/tmp",authorize="upload",required=True)\n                          )\n    return dict(form=form)\n\n@auth.requires_login()\n@auth.requires_membership(\'auditor\')\ndef review_hostoverview():\n    #TODO: Create  a page which shows everything about hosts network footprint (excluding vulns and software)\n    pass\n@auth.requires_login()\n@auth.requires_membership(\'auditor\')\ndef review_hostvulns():\n    #TODO: Create a page which shows vulnerabilities related to hosts\n    pass\n@auth.requires_login()\n@auth.requires_membership(\'auditor\')\ndef review_hostsoftware():\n    #TODO: Create a page which shows all software related to hosts\n    pass\ndef network_map():\n    #TODO: Create a network map based on hops database!\n    pass\n@auth.requires_login()\n@auth.requires_membership(\'auditor\')\ndef review_scans():\n    #TODO: Create a page which essentially just dumps the scans database out in a sql smart grid (use web2py built in)\n    pass\n@auth.requires_login()\n@auth.requires_membership(\'editor\')\ndef edit_hosts():\n    # TODO: SQL smartgrid for hosts database\n    pass\n@auth.requires_login()\n@auth.requires_membership(\'editor\')\ndef edit_vulnerabilities():\n    pass\n@auth.requires_login()\n@auth.requires_membership(\'editor\')\ndef edit_ports():\n    pass\n@auth.requires_login()\n@auth.requires_membership(\'editor\')\ndef edit_softauth():\n    pass\n@auth.requires_login()\n@auth.requires_membership(\'editor\')\ndef edit_software():\n    pass\n@auth.requires_login()\n@auth.requires_membership(\'editor\')\ndef edit_hops():\n    grid = SQLFORM.smartgrid(db.hops, headers={\'hops.ip\': \'Hop IP\', \'hops.hostname\': \'Hop Hostname\',\n                                                  \'hops.scanner_ip\': \'Origin Host IP\',\n                                                  \'hops.dst_ip\': \'Target IP\', \'hops.rtt\': \'Time to Hop Host (RTT)\',\n                                                  \'hops.ttl\': \'Distance from Origin (TTL)\'})\n\n    return dict(form=form)\n\nresponse._vars=response._caller(import_results)\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "/home/www-data/web2py/gluon/restricted.py", line 227, in restricted\n    exec ccode in environment\n  File "/home/www-data/web2py/applications/pyAssetInventory/controllers/default.py", line 147, in <module>\n  File "/home/www-data/web2py/gluon/globals.py", line 417, in <lambda>\n    self._caller = lambda f: f()\n  File "/home/www-data/web2py/gluon/tools.py", line 4241, in f\n    return action(*a, **b)\n  File "/home/www-data/web2py/gluon/tools.py", line 4241, in f\n    return action(*a, **b)\n  File "/home/www-data/web2py/applications/pyAssetInventory/controllers/default.py", line 89, in import_results\n    Field(\'Results_File\',\'upload\',uploadfolder="/tmp",authorize="upload",required=True)\n  File "/home/www-data/web2py/gluon/sqlhtml.py", line 1808, in factory\n    return SQLFORM(DAL(None).define_table(table_name, *fields),\n  File "/home/www-data/web2py/gluon/packages/dal/pydal/base.py", line 834, in define_table\n    table = self.lazy_define_table(tablename,*fields,**args)\n  File "/home/www-data/web2py/gluon/packages/dal/pydal/base.py", line 851, in lazy_define_table\n    table = table_class(self, tablename, *fields, **args)\n  File "/home/www-data/web2py/gluon/packages/dal/pydal/objects.py", line 299, in __init__\n    field\nSyntaxError: define_table argument is not a Field or Table: \n'
p11
s.